buildscript {
    ext {
        fsRuntimeVersion = '5.2.230212'
        fsIsolationCheckVersion = '5.2.230212' // update regularly to test against newest FirstSpirit release
        magicIconsVersion = '2.1.0'
        okhttpVersion = '4.12.0'
        moshiVersion = '1.14.0'
        genericConfigVersion = '2.8.0'
    }
}

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'de.espirit.firstspirit-module' version '4.7.0'
    id 'net.researchgate.release' version '3.0.2'
}


allprojects {
    p ->
        apply plugin: 'java'
        group = project.property('groupId')

        repositories {
            maven {
                url = 'https://artifactory.e-spirit.hosting/artifactory/repo/'
                credentials {
                    // Do NOT edit these lines since the credentials will be read from the local Gradle configuration.
                    username = artifactory_hosting_username
                    password = artifactory_hosting_password
                }
            }
            gradlePluginPortal()
        }


        dependencies {
            compileOnly group: 'org.jetbrains', name: 'annotations', version: '24.0.1'
        }


        tasks.withType(JavaCompile).configureEach {
            options.encoding = 'UTF-8'
            options.release.set(11)
        }

        compileJava.options.encoding = 'UTF-8'
        compileTestJava.options.encoding = 'UTF-8'

        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    fsLicense
}

task aggregatedJavadocs(type: Javadoc, description: 'Generate javadocs from all projects as if it was a single project', group: 'Documentation') {
    destinationDir = file("$buildDir/docs/javadoc")
    title = "$project.name - $version API Docs"

    allprojects.each { proj ->
        proj.tasks.withType(Javadoc).each { javadocTask ->
            source += javadocTask.source
            classpath += javadocTask.classpath
            excludes += javadocTask.excludes
            includes += javadocTask.includes
        }
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation group: 'de.espirit.firstspirit', name: 'fs-isolated-runtime', version: "${fsRuntimeVersion}"
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.5.0'


    compileOnly group: 'de.espirit.firstspirit', name: 'fs-isolated-runtime', version: "${fsRuntimeVersion}"

    fsServerCompile project(':server')
    fsWebCompile project(':server')

    fsModuleCompile group: "com.espirit.ps.psci.module", name: "generic-configuration", version: "${genericConfigVersion}"
    fsModuleCompile group: "com.espirit.ps.psci.module", name: "magic-icons", version: "${magicIconsVersion}"
    fsModuleCompile group: "com.squareup.okhttp3", name: "okhttp", version: "${okhttpVersion}"
    fsModuleCompile group: "com.squareup.moshi", name: "moshi", version: "${moshiVersion}"

    fsWebCompile group: "com.espirit.ps.psci.module", name: "generic-configuration", version: "${genericConfigVersion}"
    fsWebCompile group: "com.espirit.ps.psci.module", name: "magic-icons", version: "${magicIconsVersion}"
    fsWebCompile group: "com.squareup.okhttp3", name: "okhttp", version: "${okhttpVersion}"
    fsWebCompile group: "com.squareup.moshi", name: "moshi", version: "${moshiVersion}"
}

test {
    useJUnitPlatform()
}

/*
 * FirstSpirit Module Gradle Plugin configuration
 */

def serverHttpPort = 0
new ServerSocket(0).withCloseable {
    port1 -> serverHttpPort = port1.getLocalPort()
}

firstSpiritModule {
    moduleName = project.property('firstSpiritModule.moduleName')
    displayName = project.property('firstSpiritModule.displayName')
    description = project.property('firstSpiritModule.description')
    vendor = project.property('firstSpiritModule.vendor')
}

/*
 * Verify gradle.properties values
 */
afterEvaluate {
    ['groupId', 'firstSpiritModule.moduleName', 'firstSpiritModule.displayName', 'firstSpiritModule.vendor'].each {
        if (!project.hasProperty(it) || (project.property(it) as String).trim().empty) {
            throw new GradleException("Property '${it}' in gradle.properties must not be empty!")
        }
    }
}